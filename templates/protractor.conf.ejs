<%- jasmineReportExpression _%>
<% if(answers.framework === "cucumber" && answers.cucumberReportType === "html") { _%>
const reporter = require("cucumber-html-reporter");
<% } %>
/*
====================================================================
For full list of Protractor config options,
see- https://github.com/angular/protractor/blob/master/lib/config.ts
====================================================================
**/
exports.config = {
    /**
    * The timeout in milliseconds for each script run on the browser. This
    * should be longer than the maximum time your application needs to
    * stabilize between tasks.
    */  
    allScriptsTimeout: 120000,
    <% if(seleniumServerJarExpression) { %>
    /**
    * The location of the standalone Selenium Server jar file, relative
    * to the location of webdriver-manager. If no other method of starting
    * Selenium Server is found, this will default to
    * node_modules/protractor/node_modules/webdriver-manager/selenium/<jar file>
    */
    <%- seleniumServerJarExpression _%>
    <% } _%>
    <% if(seleniumAddressExpression) { %>
    /**
    * The address of a running Selenium Server. If specified, Protractor will
    * connect to an already running instance of Selenium. This usually looks like
    * seleniumAddress: 'http://localhost:4444/wd/hub'
    */
    <%- seleniumAddressExpression _%>
    <% } _%>
    <% if(answers.drivers) { %>
    // To connect directly to Drivers ------------------------------------
        
    /**
    * If true, Protractor will connect directly to the browser Drivers
    * at the locations specified by chromeDriver and firefoxPath. Only Chrome
    * and Firefox are supported for direct connect.
    *
    * default: false
    */
    directConnect: true,
    <% } _%>
    <% if(answers.backend.indexOf("cloud services") > -1) { %>
    <% if(answers.sauceUser && answers.sauceKey) { %>
    // To use remote browsers via Sauce Labs -----------------------------

    /**
    * If the sauceUser and sauceKey are specified, seleniumServerJar will be
    * ignored. The tests will be run remotely using Sauce Labs.
    */
    sauceUser: '<%=answers.sauceUser_%>',
    sauceKey: '<%=answers.sauceKey_%>',
    <% } else if(answers.browserstackUser && answers.browserstackKey) { %>
    // To use remote browsers via BrowserStack ---------------------------

    /**
    * If browserstackUser and browserstackKey are specified, seleniumServerJar
    * will be ignored. The tests will be run remotely using BrowserStack.
    */
    browserstackUser: '<%=answers.browserstackUser_%>',
    browserstackKey: '<%=answers.browserstackKey_%>',
    <% } _%>
    <% } %>
    /**
    * A base URL for your application under test. Calls to protractor.get()
    * with relative paths will be resolved against this URL (via url.resolve)
    */
    baseUrl: '<%= answers.baseURL _%>',
    /**
    * Protractor can launch your tests on one or more browsers. If you are
    * testing on a single browser, use the capabilities option. If you are
    * testing on multiple browsers, use the multiCapabilities array.
    *
    * For a list of available capabilities, see
    * https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities
    * In addition, you may specify count, shardTestFiles, and maxInstances.
    *
    * Example:
    * capabilities: {
    *   browserName: 'chrome',
    *   name: 'Unnamed Job',
    *   logName: 'Chrome - English',
    *   count: 1,
    *   shardTestFiles: false,
    *   maxInstances: 1,
    *   specs: ['spec/chromeOnlySpec.js'],
    *   exclude: ['spec/doNotRunInChromeSpec.js'],
    *   seleniumAddress: 'http://localhost:4444/wd/hub'
    * }
    */
    capabilities: {
        browserName: '<%= answers.browser%>'
    },
    /**
    * Test framework to use. This may be one of: jasmine, mocha or custom.
    * Default value is 'jasmine'
    *
    * When the framework is set to "custom" you'll need to additionally
    * set frameworkPath with the path relative to the config file or absolute:
    *
    *   framework: 'custom',
    *   frameworkPath: './frameworks/my_custom_jasmine.js',
    *
    * See github.com/angular/protractor/blob/master/lib/frameworks/README.md
    * to comply with the interface details of your custom implementation.
    *
    * Jasmine is fully supported as test and assertion frameworks.
    * Mocha has limited support. You will need to include your
    * own assertion framework (such as Chai) if working with Mocha.
    */
    <% if(answers.framework === 'cucumber') { %>
    framework: 'custom',
    frameworkPath: require.resolve("protractor-cucumber-framework"),
    <% } else { _%>
    framework: '<%= answers.framework%>',
    <% } _%> 
    /**
    * Required. Spec patterns are relative to the location of this config.
    *
    * Example:
    * specs: [
    *   'spec/*_spec.js'
    * ]
    */
    specs: [
        '<%= answers.specs %>'
    ],
    /**
    * Protractor Log Level Config
    */
    logLevel: <%- logExpression _%>,
    <%_ if(answers.framework.match(/(jasmine|mocha)/) && answers.reportType === "json") { _%>
    /**
    * If set, protractor will save the test output in json format at this path.
    * The path is relative to the location of this config.
    */
    resultJsonOutputFile: "<%= `${answers.reportPath}/`+'protractor_report.json' %>",
    <%_ } _%>
    <%_ if(beforeLaunchExpression) { _%>
    /**
    * A callback function called once configs are read but before any
    * environment setup. This will only run once, and before onPrepare.
    *
    * You can specify a file containing code to run by setting beforeLaunch to
    * the filename string.
    *
    * At this point, global variable 'protractor' object will NOT be set up,
    * and globals from the test framework will NOT be available. The main
    * purpose of this function should be to bring up test dependencies.
    */
    beforeLaunch: () => {
        <%- beforeLaunchExpression _%>
    },
    <%_ } _%>
    <%_ if(answers.framework === "jasmine") { _%>
    /**
    * Options to be passed to jasmine.
    *
    * See https://github.com/jasmine/jasmine-npm/blob/master/lib/jasmine.js
    * for the exact options available.
    */
    jasmineNodeOpts: {
        defaultTimeoutInterval: 120000,
        <% if(answers.reportType === "spec") { _%>
        print: () => {},
        <% } _%>
        showColors: true,
        random: false,
    },
    <%_ } _%>
    <%_ if(answers.framework === "mocha") { _%>
    /**
    * Options to be passed to Mocha.
    *
    * See the full list at http://mochajs.org/
    */
    mochaOpts: {
        bail: true,
        colors: true,
        compilers:<%- transpilerExpression %>, 
        reporter:<%- mochaReportExpression %>,
        timeout: 30000,
        ui: "bdd",
        },
        <%_ } _%>
    <%_ if(onPrepareExpression) { %>
    /**
    * A callback function called once protractor is ready and available, and
    * before the specs are executed. If multiple capabilities are being run,
    * this will run once per capability.
    *
    * You can specify a file containing code to run by setting onPrepare to
    * the filename string. onPrepare can optionally return a promise, which
    * Protractor will wait for before continuing execution. This can be used if
    * the preparation involves any asynchronous calls, e.g. interacting with
    * the browser. Otherwise Protractor cannot guarantee order of execution
    * and may start the tests before preparation finishes.
    *
    * At this point, global variable 'protractor' object will be set up, and
    * globals from the test framework will be available. For example, if you
    * are using Jasmine, you can add a reporter with:
    *
    *    jasmine.getEnv().addReporter(new jasmine.JUnitXmlReporter(
    *      'outputdir/', true, true));
    *
    * If you need access back to the current configuration object,
    * use a pattern like the following:
    *
    *    return browser.getProcessedConfig().then(function(config) {
    *      // config.capabilities is the CURRENT capability being run, if
    *      // you are using multiCapabilities.
    *      console.log('Executing capability', config.capabilities);
    *    });
    */
    onPrepare: () => {
        <%- onPrepareExpression %>
    },
    <%_ } %>  
    <%_ if(answers.framework === "cucumber"){ %>
        /**
        * Options to be passed to cucumber.
        *
        * See https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md
        * for the exact options available.
        */
    cucumberOpts: {
        "compiler":<%- transpilerExpression %>,                                                  
        "dry-run": false,                                           
        "fail-fast": false,                                         
        "format":["<%- formatExpression _%>"],                                                           
        "require":["<%= answers.stepDefinitions _%>"],               
        "tags":"",                                                 

    },
    <% } _%>
    <% if(onCompleteExpression) { _%>
    /**
    * A callback function called once tests are finished. onComplete can
    * optionally return a promise, which Protractor will wait for before
    * shutting down webdriver.
    *
    * At this point, tests will be done but global objects will still be
    * available.
    */
    onComplete: () => {
        <%- onCompleteExpression _%>
    }
    <% } _%>

};
/*
====================================================================
For full list of Protractor config options,
see- https://github.com/angular/protractor/blob/master/lib/config.ts
====================================================================
**/